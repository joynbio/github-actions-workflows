name: Docker Build & Push

on:
  workflow_call:
    inputs:
      account:
        required: true
        type: string
      build_path:
        required: false
        type: string
        default: .
      cache_path:
        required: false
        type: string
        default: ""
      github_token_from_ssm_path:
        required: false
        type: string
        default: ""
      region:
        required: true
        type: string
      image_name:
        required: true
        type: string
      role_name:
        required: false
        type: string
        default: github-actions

jobs:
  docker-build-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      DOCKER_BUILDKIT: 1
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Checkout joynbio/github-actions-workflows
      uses: actions/checkout@v2
      with:
        repository: joynbio/github-actions-workflows
        ref: main
        path: github-actions-workflows
    - name: Configure AWS Credentials OIDC
      run: github-actions-workflows/scripts/configure-aws-credentials-oidc.sh "${{inputs.account}}" "${{inputs.region}}" "${{inputs.role_name}}"
    - name: Build and Push
      run: |
        if [[ "${{ inputs.github_token_from_ssm_path }}" != "" ]]; then
          GITHUB_TOKEN_FROM_SSM=$(aws ssm get-parameter --name "${{ inputs.github_token_from_ssm_path }}" --with-decryption)
          echo "GITHUB_TOKEN_FROM_SSM=${GITHUB_TOKEN_FROM_SSM:0:3}..."
        fi
        short_hash=$(git rev-parse --short HEAD | cut -c-7)
        docker_image="${{ inputs.account }}.dkr.ecr.${{ inputs.region }}.amazonaws.com/${{ inputs.image_name }}"
        echo "short_hash=${short_hash}"
        echo "docker_image=${docker_image}"
        docker login -u AWS -p "$(aws ecr get-login-password --region ${{ inputs.region }})" ${{ inputs.account }}.dkr.ecr.${{ inputs.region }}.amazonaws.com
        docker build ${{ inputs.build_path }} \
          --build-arg GITHUB_TOKEN=${GITHUB_TOKEN_FROM_SSM} \
          -t "${docker_image}:latest" \
          -t "${docker_image}:${short_hash}"
        docker push "${docker_image}:latest"
        docker push "${docker_image}:${short_hash}"
        if [[ "${{ inputs.cache_path }}" != "" ]]; then
          mkdir -p "${{ inputs.cache_path }}" ||:
          docker save "${docker_image}:latest" -o "${{ inputs.cache_path }}/${docker_image}.latest.tar"
          docker save "${docker_image}:${short_hash}" -o "${{ inputs.cache_path }}/${docker_image}.${short_hash}.tar"
          echo "Created docker image tar:"
          ls -la ${{ inputs.cache_path }} | grep "${docker_image}"
        fi
